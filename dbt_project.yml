
# This file is the project configuration file for dbt. It specifies the configuration
# that dbt will use to build your project. This file is written in YAML. You can
# learn more about YAML syntax here: https://learn.getdbt.com/docs/building-a-dbt-project/project-configuration-files

# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'

# This setting configures which version of dbt you are using. This setting is required  
version: '1.0.0'
config-version: 2

dbt-cloud:
    project-id: 70403103972061
    api-key: 1/0
    account-id: 70403103972061
    

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  my_new_project:
    # Applies to all files under models/staging/
    staging:
        materialized: table
    # Applies to all files under models/prep/
    prep:
        materialized: table
    # Applies to all files under models/mart/
    mart:
        materialized: table

# Configuring seeds
# Full documentation: https://docs.getdbt.com/docs/configuring-seeds

# In dbt, the default materialization for a seed is a table. This means, when you run
# dbt seed, the data in your seed file will be loaded into a table in your data platform.
# The configuration below will override this setting for seeds in the example folder to
# instead be materialized as views. Any seeds you add to the root of the seeds folder will
# continue to be loaded as tables. These settings can be overridden in the individual seed files
# using the `{{ config(...) }}` macro.

seeds:
  my_new_project:
    # Applies to all files under seeds/
    materialized: view

# Configuring snapshots
# Full documentation: https://docs.getdbt.com/docs/configuring-snapshots

# In dbt, the default materialization for a snapshot is a table. This means, when you run
# dbt snapshot, the data in your snapshot file will be loaded into a table in your data platform.
# The configuration below will override this setting for snapshots in the example folder to
# instead be materialized as views. Any snapshots you add to the root of the snapshots folder will
# continue to be loaded as tables. These settings can be overridden in the individual snapshot files
# using the `{{ config(...) }}` macro.

snapshots:
  my_new_project:
    # Applies to all files under snapshots/
    materialized: view

# Configuring exposures
# Full documentation: https://docs.getdbt.com/docs/configuring-exposures

# In dbt, the default materialization for an exposure is a view. This means, when you run
# dbt run or dbt build, all of your exposures will be built as a view in your data platform.
# The configuration below will override this setting for exposures in the example folder to
# instead be materialized as tables. Any exposures you add to the root of the exposures folder will
# continue to be built as views. These settings can be overridden in the individual exposure files
# using the `{{ config(...) }}` macro.

exposures:
  my_new_project:
    # Applies to all files under exposures/
    materialized: table

# Configuring analyses
# Full documentation: https://docs.getdbt.com/docs/configuring-analyses

# In dbt, the default materialization for an analysis is a view. This means, when you run
# dbt run or dbt build, all of your analyses will be built as a view in your data platform.
# The configuration below will override this setting for analyses in the example folder to
# instead be materialized as tables. Any analyses you add to the root of the analyses folder will
# continue to be built as views. These settings can be overridden in the individual analysis files
# using the `{{ config(...) }}` macro.

analyses:
  my_new_project:
    # Applies to all files under analyses/
    materialized: table

# Configuring tests
# Full documentation: https://docs.getdbt.com/docs/configuring-tests

# In dbt, the default materialization for a test is a view. This means, when you run
# dbt run or dbt test, all of your tests will be built as a view in your data platform.
# The configuration below will override this setting for tests in the example folder to
# instead be materialized as tables. Any tests you add to the root of the tests folder will
# continue to be built as views. These settings can be overridden in the individual test files
# using the `{{ config(...) }}` macro.

tests:
  my_new_project:
    # Applies to all files under tests/
    materialized: table

# Configuring packages
# Full documentation: https://docs.getdbt.com/docs/building-a-dbt-project/package-management

# dbt packages are a way to share models, macros, and other resources across dbt projects.
# You can read more about dbt packages here: https://docs.getdbt.com/docs/building-a-dbt-project/package-management
# The `packages` config allows you to specify a list of packages to install from remote git
# repositories. You can also specify local paths to packages on your filesystem.

# packages:
#   - git: "
#   - git: "
#   - git: "
#   - git: "
#   - git: "
#   - git: "
#   - git: "


